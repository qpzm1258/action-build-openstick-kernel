name: Build ARM64 Kernel with DEB Packaging

on:
  workflow_dispatch:  # 手动触发
    inputs:
      kernel_version:
        description: 'Kernel version (e.g. v6.6)'
        required: true
        default: 'v6.12.1-msm8916'
      config_profile:
        description: 'Config profile (defconfig/custom)'
        required: true
        default: 'custom'
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  build_kernel:
    runs-on: ubuntu-24.04-arm
    env:
      ARCH: arm64
      DEB_VERSION: ${{ github.run_id }}  # 用运行ID确保版本唯一性
      TERM: xterm

    steps:
    # 1. 环境初始化
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses-dev libssl-dev bc flex bison \
          gcc-aarch64-linux-gnu dpkg-dev kmod cpio rsync u-boot-tools \
          debhelper libelf-dev libssl-dev coreutils \
          android-sdk-libsparse-utils
      # 安装编译依赖项 [5,6](@ref)

    # 2-1. 获取本项目源码
    - name: Checkout Workflow Repo
      uses: actions/checkout@v4
      with:
        lfs: true
        path: workspace

    # 2-2. 获取内核源码
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: msm8916-mainline/linux
        ref: ${{ inputs.kernel_version }}  # 使用输入的内核版本
        path: linux-src

    # 3. 内核配置
    - name: Configure Kernel
      run: |
        cd linux-src
        case "${{ inputs.config_profile }}" in
          defconfig)
            make ARCH=$ARCH msm8916_defconfig
            ;;
          custom)
            cp $GITHUB_WORKSPACE/workspace/.config .  # 使用仓库中的自定义配置
            make ARCH=$ARCH olddefconfig
            ;;
        esac
        git apply $GITHUB_WORKSPACE/workspace/patch/ufi.patch

    # 4. 编译内核与生成DEB包
    - name: Build Kernel & DEB Packages
      run: |
        cd linux-src
        # 编译内核与模块
        make ARCH=$ARCH -j$(nproc) all
        
        # 生成DEB安装包
        make ARCH=$ARCH \
          KDEB_PKGVERSION=1.${{ env.DEB_VERSION }} \
          KBUILD_DEBARCH=arm64 \
          bindeb-pkg
        # DEB打包方法 [6](@ref)
        
        # 重命名输出文件
        mkdir -p $GITHUB_WORKSPACE/artifacts/
        cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/msm8916-thwc-ufi001c.dtb > $GITHUB_WORKSPACE/artifacts/kernel-dtb
        mv ../linux-*.deb ../artifacts/

    # 5. 生成root.img,格式化为btrfs格式
    - name: Build Rootfs
      run: |
        sudo dd if=/dev/zero of=root.img bs=1M count=1536
        sudo mkfs.btrfs --metadata single --data single --label "rootfs" -U a7ab80e8-e9d1-e8cd-f157-93f69b1d141e root.img
        mkdir -p rootfs 

    # 6. 挂载rootfs并释放文件
    - name: Mount Rootfs
      run: |
        sudo mount -o compress=zstd,defaults,noatime,space_cache=v2,nodatacow root.img rootfs/
        sudo tar --numeric-owner -xvpzf $GITHUB_WORKSPACE/workspace/rootfs/debian13.tar.gz -C rootfs
        sudo mount --bind /proc rootfs/proc 
        sudo mount --bind /dev rootfs/dev 
        sudo mount --bind /dev/pts rootfs/dev/pts 
        sudo mount --bind /sys rootfs/sys
        sudo cp $GITHUB_WORKSPACE/artifacts/*.deb rootfs/root/

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  

  
    # 7. 生成boot.img
    - name: Build Boot img
      run: |
        sudo rm rootfs/root/*dbg*.deb
        sudo chroot rootfs /usr/bin/dpkg -i /root/*.deb
        sudo chroot rootfs /usr/sbin/dpkg-reconfigure openssh-server
        sudo umount rootfs/proc
        sudo umount rootfs/dev/pts
        sudo umount rootfs/dev
        sudo umount rootfs/sys
        mkbootimg \
          --base 0x80000000 \
          --kernel_offset 0x00080000 \
          --ramdisk_offset 0x02000000 \
          --tags_offset 0x01e00000 \
          --pagesize 2048 \
          --second_offset 0x00f00000 \
          --ramdisk rootfs/boot/initrd.img-* \
          --cmdline "earlycon root=PARTUUID=a7ab80e8-e9d1-e8cd-f157-93f69b1d141e rootflags=compress=zstd,defaults,noatime,discard=async,autodefrag,nodatacow,noatime,space_cache=v2,recovery console=ttyMSM0,115200 no_framebuffer=true rw" \
          --kernel $GITHUB_WORKSPACE/artifacts/kernel-dtb \
          -o $GITHUB_WORKSPACE/artifacts/boot.img

    # 8. 打包roofs.img
    - name: Package Rootfs
      run: |
        umount rootfs
        img2simg root.img $GITHUB_WORKSPACE/artifacts/rootfs.img

    # 9. 上传制品
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ inputs.kernel_version }}-arm64-debs
        path: |
          artifacts/*
          linux-src/arch/arm64/boot/Image
          linux-src/arch/arm64/boot/dts/qcom/msm8916-thwc-ufi001c.dtb

