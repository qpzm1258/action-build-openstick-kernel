name: Build Debian for Openstick

on:
  workflow_dispatch:  # 手动触发
    inputs:
      debian_version:
        description: 'debian version (support 12 or 13)'
        required: true
        type: choice
        default: trixie
        options:
          - bookworm
          - trixie
          - noble
          - plucky
      kernel_version:
        description: 'Kernel version (e.g. v6.6)'
        required: true
        default: 'v6.12.1-msm8916'
      config_profile:
        description: 'Config profile (defconfig/custom)'
        required: true
        default: 'custom'
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      upload_release:
        description: 'Upload firmware to release'
        required: false
        default: 'false'
      localversion:
        description: 'Set your localversion(e.g. -openstick)'
        required: false
        default: '-openstick'
      rootfs_type:
        description: 'Set rootfs type(e.g. ext4/btrfs)'
        type: choice
        default: btrfs
        required: false
        options:
          - btrfs
          - ext4

jobs:
  build_debian:
    runs-on: ubuntu-24.04-arm
    env:
      ARCH: arm64
      DEB_VERSION: ${{ github.run_id }}  # 用运行ID确保版本唯一性
      TERM: xterm
      UPLOAD_RELEASE: ${{ inputs.upload_release }}

    steps:
    # 1. 环境初始化
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses-dev libssl-dev bc flex bison \
          gcc-14 g++-14 dpkg-dev kmod cpio rsync u-boot-tools \
          debhelper libelf-dev libssl-dev coreutils \
          android-sdk-libsparse-utils wget gcc-14-aarch64-linux-gnu \
          curl libdw-dev
          wget http://ftp.debian.org/debian/pool/main/a/android-platform-tools/mkbootimg_34.0.5-12_all.deb
          sudo dpkg -i mkbootimg_34.0.5-12_all.deb
          wget http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.141_all.deb
          sudo dpkg -i debootstrap_1.0.141_all.deb
      # 安装编译依赖项 [5,6](@ref)

    # 2-1. 获取本项目源码
    - name: Checkout Workflow Repo
      uses: actions/checkout@v4
      with:
        lfs: true
        submodules: recursive
        path: workspace

    # 2-2. 获取内核源码
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: msm8916-mainline/linux
        ref: ${{ inputs.kernel_version }}  # 使用输入的内核版本
        path: linux-src

    # 3. 内核配置
    - name: Configure Kernel
      id: configure
      run: |
        cd linux-src
        case "${{ inputs.config_profile }}" in
          defconfig)
            make ARCH=$ARCH CC=gcc-14 HOSTCC=gcc-14 msm8916_defconfig
            ;;
          custom)
            make ARCH=$ARCH CC=gcc-14 HOSTCC=gcc-14 msm8916_defconfig
            scripts/kconfig/merge_config.sh -m -Q .config  $GITHUB_WORKSPACE/workspace/.config # 使用仓库中的自定义配置
            make ARCH=$ARCH CC=gcc-14 HOSTCC=gcc-14 olddefconfig
            ;;
        esac
        make ARCH=$ARCH CC=gcc-14 HOSTCC=gcc-14 savedefconfig
        git apply $GITHUB_WORKSPACE/workspace/patch/ufi.patch
        if [ ! -z "${{ inputs.localversion }}" ]; then
          sed -i "s/^CONFIG_LOCALVERSION=\".*\"/CONFIG_LOCALVERSION=\"${{ inputs.localversion }}\"/" .config
        fi
        KERNEL_VER=$(make kernelversion)
        echo "kernel_ver=$KERNEL_VER" >> $GITHUB_OUTPUT
        
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  

    # 4. 编译内核与生成DEB包
    - name: Build Kernel & DEB Packages
      id: kernel
      run: |
        cd linux-src
        # 编译内核与模块
        # make ARCH=$ARCH CC=gcc-14 HOSTCC=gcc-14 -j$(nproc) all
        
        # 生成DEB安装包
        make ARCH=$ARCH \
          CC=gcc-14 HOSTCC=gcc-14 \
          KDEB_PKGVERSION=1.${{ env.DEB_VERSION }} \
          KBUILD_DEBARCH=arm64 \
          -j$(nproc) \
          bindeb-pkg
        # DEB打包方法 [6](@ref)
        
        # 重命名输出文件
        mkdir -p $GITHUB_WORKSPACE/artifacts/
        cat arch/arm64/boot/Image.gz arch/arm64/boot/dts/qcom/msm8916-thwc-ufi001c.dtb > $GITHUB_WORKSPACE/artifacts/kernel-dtb
        mv ../linux-*.deb ../artifacts/
        echo "status=success" >>$GITHUB_OUTPUT

    # 5. 生成root.img,格式化为btrfs格式
    - name: Build Rootfs
      id: root
      if: steps.kernel.outputs.status == 'success' && !cancelled()
      run: |
        mkdir -p rootfs 
        mkdir -p img
        sudo dd if=/dev/zero of=root.img bs=1M count=1536
        if [ "${{ inputs.rootfs_type }}" = "btrfs" ]; then
          sudo mkfs.btrfs -O free-space-tree --metadata single --data single --label "rootfs" -U a7ab80e8-e9d1-e8cd-f157-93f69b1d141e root.img
          sudo losetup -fP root.img
          sudo mount -t btrfs -o compress=zstd,defaults,noatime,sync /dev/loop0 img/
        else
          sudo mkfs.ext4 -L rootfs -m 0 -O ^has_journal -E lazy_itable_init=0,lazy_journal_init=0 -b 4096 -I 256 root.img
          sudo losetup -fP root.img
          sudo mount /dev/loop0 img/
        fi
        echo "status=success" >>$GITHUB_OUTPUT
  
    # 7. 生成boot.img
    - name: Build Boot img
      id: bootimg
      if: steps.root.outputs.status == 'success' && !cancelled()
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support
        if [[ -f $GITHUB_WORKSPACE/workspace/packages.txt ]]; then
          PKGS=$(grep -vE '^\s*#' $GITHUB_WORKSPACE/workspace/packages.txt | tr '\n' ',' | sed 's/,$//')
          echo "📦 将安装的额外包: $PKGS"
        else
          echo "⚠️ 未找到 $PKG_LIST_FILE，跳过 --include"
          PKGS=""
        fi

        ver="${{ inputs.debian_version }}"
        if [ "$ver" = "trixie" ] || [ "$ver" = "bookworm" ]; then
          OSTYPE=debian
        elif [ "$ver" = "noble" ] || [ "$ver" = "plucky" ]; then
          OSTYPE=ubuntu
        fi
        echo "OSTYPE=$OSTYPE" >> $GITHUB_ENV

        DEBURL="http://deb.debian.org/debian"
        DEBSRC="main,contrib,non-free,non-free-firmware"
        if [ "$OSTYPE" = "ubuntu" ]; then
          DEBURL="http://ports.ubuntu.com/ubuntu-ports"
          DEBSRC="main,universe,multiverse"
          PKGS="$PKGS bsdextrautils systemd-resolved"
        else
          PKGS="$PKGS bsdmainutils ifupdown isc-dhcp-client isc-dhcp-common netfilter-persistent rmtfs runit-helper util-linux-extra usrmerge"
        fi
        
        if [[ -n "$PKGS" ]]; then
          sudo DEBIAN_FRONTEND=noninteractive debootstrap --foreign --arch=arm64 --variant=minbase --components="$DEBSRC" --include="$PKGS" ${{ inputs.debian_version }} rootfs "$DEBURL"
        else
          sudo DEBIAN_FRONTEND=noninteractive debootstrap --foreign --arch=arm64 --variant=minbase --components="$DEBSRC" ${{ inputs.debian_version }} rootfs "$DEBURL"
        fi
        sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
        sudo chroot rootfs /debootstrap/debootstrap --second-stage
        echo "root:1" | sudo chroot rootfs chpasswd
        sudo chroot rootfs useradd -m -s /bin/bash klipper
        echo "klipper:1" | sudo chroot rootfs chpasswd
        sudo chroot rootfs usermod -aG sudo klipper
        sudo rm rootfs/usr/bin/qemu-aarch64-static
        sudo cp -r --update=none $GITHUB_WORKSPACE/workspace/firmware rootfs/usr/lib/
        sudo chmod -R 644 rootfs/usr/lib/firmware
        sudo cp -a --update=none $GITHUB_WORKSPACE/workspace/files/system/* rootfs/etc/systemd/
        sudo cp -a $GITHUB_WORKSPACE/workspace/files/dhcp.conf rootfs/etc/dnsmasq.d/dhcp.conf
        sudo cp -a $GITHUB_WORKSPACE/workspace/files/rc.local rootfs/etc/rc.local
        sudo chmod +x rootfs/etc/rc.local
        sudo cp -a $GITHUB_WORKSPACE/workspace/files/msm8916-usb-gadget.sh rootfs/usr/sbin/
        sudo cp -a $GITHUB_WORKSPACE/workspace/files/msm8916-usb-gadget.conf rootfs/etc/
        sudo chmod +x rootfs/usr/sbin/msm8916-usb-gadget.sh
        sudo cp $GITHUB_WORKSPACE/workspace/files/*.nmconnection rootfs/etc/NetworkManager/system-connections
        sudo chmod 0600 rootfs/etc/NetworkManager/system-connections/*
        sudo cp $GITHUB_WORKSPACE/workspace/files/99-custom.conf rootfs/etc/NetworkManager/conf.d/
        sudo mount --bind /proc rootfs/proc 
        sudo mount --bind /dev rootfs/dev 
        sudo mount --bind /dev/pts rootfs/dev/pts 
        sudo mount --bind /sys rootfs/sys
        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf
        sudo chroot rootfs /bin/bash -c "echo openstick > /etc/hostname"
        sudo chroot rootfs /bin/bash -c "echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8"
        sudo chroot rootfs /bin/bash -c "cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime"
        sudo chroot rootfs /bin/bash -c "echo 'export TERM=xterm-256color' >> /etc/profile"
        sudo chroot rootfs /bin/bash -c "sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config"
        sudo cp $GITHUB_WORKSPACE/artifacts/*.deb rootfs/root/
        sudo cp $GITHUB_WORKSPACE/workspace/files/*.rules rootfs/etc/udev/rules.d/
        sudo cp $GITHUB_WORKSPACE/workspace/files/*.sh rootfs/usr/local/bin/
        sudo cp $GITHUB_WORKSPACE/workspace/files/10-uname rootfs/etc/update-motd.d/
        sudo cp -r --update=none $GITHUB_WORKSPACE/workspace/files/usr rootfs/
        if [ "$ver" = "trixie" ]; then
          # sudo wget -O rootfs/root/wpasupplicant_2.10-12+deb12u3_arm64.deb http://ftp.us.debian.org/debian/pool/main/w/wpa/wpasupplicant_2.10-12+deb12u3_arm64.deb
        fi
        sudo chroot rootfs /bin/bash -c "chmod +x /usr/local/bin/*.sh"
        sudo chroot rootfs /bin/bash -c "rm -f /root/*dbg*"
        sudo chroot rootfs /bin/bash -c "dpkg -i /root/*.deb"
        sudo chroot rootfs /bin/bash -c "rm -f /root/*.deb"
        if [ "$OSTYPE" = "debian" ]; then
          sudo wget -O rootfs/etc/apt/trusted.gpg.d/mobian.gpg https://repo.mobian-project.org/mobian.gpg
          sudo chroot rootfs /bin/bash -c "echo 'deb http://repo.mobian-project.org/ ${{ inputs.debian_version }} main non-free-firmware' > /etc/apt/sources.list.d/mobian.list"
          sudo chroot rootfs /bin/bash -c "apt-get update && apt-get install -qqy --no-install-recommends modemmanager qrtr-tools systemd-timesyncd mobile-broadband-provider-info mobian-tweaks-common"
        fi
        # sudo chroot rootfs /bin/bash -c "dpkg-reconfigure openssh-server"
        sudo chroot rootfs /bin/bash -c "rm -f /etc/resolv.conf"
        sudo chroot rootfs /bin/bash -c "rm -rf /var/lib/apt/lists/*"
        sudo chroot rootfs /bin/bash -c "chmod +x /usr/bin/adbd /usr/bin/gc /usr/sbin/*.sh"
        sudo chroot rootfs /bin/bash -c "systemctl daemon-reload && systemctl enable openstick-button-monitor openstick-gc-startup openstick-startup-diagnose.timer"
        sudo chroot rootfs /bin/bash -c "find /var/log -type f -delete"
        sudo chroot rootfs /bin/bash -c "cat /dev/null > /root/.bash_history"
        export PYTHONPATH=/usr/share/android-tools/mkbootimg
        INITRD=$(sudo ls -t rootfs/boot/initrd.img-* 2>/dev/null | head -n1 || true)
        if [ -z "$INITRD" ]; then
          echo "❌ ERROR: 未找到 rootfs/boot/initrd.img-*"
          ls -l rootfs/boot || true
          exit 1
        fi
        echo "✅ 使用的 initrd: $INITRD"
        cp $INITRD $GITHUB_WORKSPACE/artifacts/
        if [ "${{ inputs.rootfs_type }}" = "btrfs" ]; then
          CMDLINE="earlycon root=PARTUUID=a7ab80e8-e9d1-e8cd-f157-93f69b1d141e rootflags=compress=zstd,defaults,noatime,discard=async,autodefrag,space_cache=v2,commit=5 console=ttyMSM0,115200 no_framebuffer=true rw"
        else
          CMDLINE="earlycon root=LABEL=rootfs console=ttyMSM0,115200 no_framebuffer=true rw"
        fi
        echo "✅ 使用的 cmdline: $CMDLINE"
        mkbootimg \
          --base 0x80000000 \
          --kernel_offset 0x00080000 \
          --ramdisk_offset 0x02000000 \
          --tags_offset 0x01e00000 \
          --pagesize 2048 \
          --second_offset 0x00f00000 \
          --ramdisk $INITRD \
          --cmdline "$CMDLINE" \
          --kernel $GITHUB_WORKSPACE/artifacts/kernel-dtb \
          -o $GITHUB_WORKSPACE/boot.img
        echo "status=success" >>$GITHUB_OUTPUT
    # 8. 打包roofs.img
    - name: Package Rootfs
      id: rootfs
      if: steps.root.outputs.status == 'success' && !cancelled()
      run: |
        sudo umount rootfs/proc
        sudo umount rootfs/dev/pts
        sudo umount rootfs/dev
        sudo umount rootfs/sys
        sudo cp -ar rootfs/* img
        if [ "${{ inputs.rootfs_type }}" = "btrfs" ]; then
          sudo chroot img /bin/bash -c "chattr +C /var/cache"
          sudo chroot img /bin/bash -c "chattr +C /var/tmp"
          sudo chroot img /bin/bash -c "chattr +C /var/log/journal"
          sudo chroot img /bin/bash -c "chattr +C /var/log"
        fi
        sudo sync
        sudo umount img
        img2simg root.img $GITHUB_WORKSPACE/rootfs.img
        echo "status=success" >>$GITHUB_OUTPUT

    # 9. 上传制品
    - name: Upload Artifacts
      if: steps.kernel.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ steps.configure.outputs.kernel_ver }}-arm64-debs
        path: |
          artifacts/*
          linux-src/arch/arm64/boot/Image
          linux-src/arch/arm64/boot/dts/qcom/msm8916-thwc-ufi001c.dtb
          linux-src/defconfig

    - name: Generate release tag
      id: tag
      if: steps.rootfs.outputs.status == 'success' && steps.bootimg.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=openstick-${{ inputs.debian_version }}-kernel-${{ steps.configure.outputs.kernel_ver }}-${{ inputs.rootfs_type }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: | 
          rootfs.img
          boot.img

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 2
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

